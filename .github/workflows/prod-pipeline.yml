name: Production Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'rolling'
        type: choice
        options:
        - rolling
        - blue-green
      services:
        description: 'Services to deploy (comma-separated)'
        required: true
        default: 'order-service,payment-service,product-service'

jobs:
  create-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      release_version: ${{ steps.release.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Create Release
        id: release
        uses: actions/create-release@v1
        env:
          REDACTED: ${{ secrets.REDACTED }}
        with:
          tag_name: v${{ github.event.inputs.release_version }}
          release_name: Release v${{ github.event.inputs.release_version }}
          draft: false
          prerelease: false

  trigger-production-pipeline:
    runs-on: ubuntu-latest
    needs: [create-release]
    if: always()
    strategy:
      matrix:
        service: [order-service, payment-service, product-service, shipping-service, user-service]
    steps:
      - name: Get release version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.release_version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "version=latest" >> $GITHUB_OUTPUT
          fi

      - name: Check if service should be deployed
        id: check-service
        run: |
          if [[ "${{ github.event.inputs.services }}" == *"${{ matrix.service }}"* ]] || [[ "${{ github.event_name }}" != "workflow_dispatch" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Trigger Jenkins Production Job
        if: steps.check-service.outputs.deploy == 'true'
        run: |
          curl -X POST \
            -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }}" \
            "${{ secrets.JENKINS_URL }}/job/${{ matrix.service }}-prod/build" \
            --data-urlencode json='{"parameter": [
              {"name":"RELEASE_VERSION", "value":"'${{ steps.version.outputs.version }}'"},
              {"name":"DEPLOYMENT_STRATEGY", "value":"'${{ github.event.inputs.deployment_strategy || 'rolling' }}'"},
              {"name":"BRANCH_NAME", "value":"'${GITHUB_REF_NAME}'"},
              {"name":"COMMIT_SHA", "value":"'${GITHUB_SHA}'"}
            ]}'

  notify-deployment:
    needs: trigger-production-pipeline
    runs-on: ubuntu-latest
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "ðŸš€ Production deployment initiated",
              attachments: [{
                color: 'good',
                fields: [{
                  title: 'Version',
                  value: '${{ steps.version.outputs.version }}',
                  short: true
                }, {
                  title: 'Services',
                  value: '${{ github.event.inputs.services || 'all' }}',
                  short: true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}