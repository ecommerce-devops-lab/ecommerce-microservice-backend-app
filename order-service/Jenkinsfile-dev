pipeline {
    agent any
    
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'develop', description: 'Branch to build')
        string(name: 'COMMIT_SHA', defaultValue: 'HEAD', description: 'Commit SHA')
        booleanParam(name: 'SKIP_SONAR', defaultValue: false, description: 'Skip SonarQube analysis')
        booleanParam(name: 'SKIP_SECURITY_SCAN', defaultValue: false, description: 'Skip Trivy security scan')
    }
    
    environment {
        // GCP Configuration
        GCP_PROJECT_ID = 'ecommerce-microservices-back'
        GCP_REGISTRY = "gcr.io/ecommerce-microservices-back"
        
        // Versioning
        IMAGE_TAG = "${params.COMMIT_SHA.take(7)}-${BUILD_NUMBER}"
        
        // Credentials
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-service-account-key')
        SONAR_TOKEN = credentials('sonarqube-token')
        GITHUB_TOKEN = credentials('github-token')
        
        // Tool paths
        PATH = "/usr/local/bin:/usr/bin:/bin:${env.PATH}"
    }
    
    tools {
        maven 'Maven-3.9.4'
        jdk 'OpenJDK-17'
    }
    
    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    sh '''
                        echo "Installing required tools..."
                        
                        # Install Docker if not present
                        if ! command -v docker &> /dev/null; then
                            echo "Installing Docker CLI..."
                            curl -fsSL https://get.docker.com -o get-docker.sh
                            sh get-docker.sh
                        fi
                        
                        # Install Google Cloud SDK if not present
                        if ! command -v gcloud &> /dev/null; then
                            echo "Installing Google Cloud SDK..."
                            curl https://sdk.cloud.google.com | bash
                            source $HOME/google-cloud-sdk/path.bash.inc
                            export PATH=$PATH:$HOME/google-cloud-sdk/bin
                        fi
                        
                        # Install kubectl if not present
                        if ! command -v kubectl &> /dev/null; then
                            echo "Installing kubectl..."
                            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                            chmod +x kubectl
                            mv kubectl /usr/local/bin/ 2>/dev/null || mv kubectl $HOME/bin/ || echo "kubectl installed locally"
                        fi
                        
                        # Install jq if not present
                        if ! command -v jq &> /dev/null; then
                            echo "Installing jq..."
                            apt-get update && apt-get install -y jq || yum install -y jq || echo "jq installation failed"
                        fi
                        
                        echo "Tools installation completed"
                    '''
                }
            }
        }
        
        stage('Initialize') {
            steps {
                script {
                    // Set dynamic environment variables
                    env.SERVICE_NAME = env.JOB_NAME.split('-dev')[0]
                    env.SERVICE_PORT = getServicePort(env.SERVICE_NAME)
                    env.BUILT_IMAGE = "${env.GCP_REGISTRY}/${env.SERVICE_NAME}:${env.IMAGE_TAG}"
                    env.BUILT_LATEST_IMAGE = "${env.GCP_REGISTRY}/${env.SERVICE_NAME}:dev-latest"
                    
                    currentBuild.description = "Building ${env.SERVICE_NAME}:${env.IMAGE_TAG}"
                    
                    echo "=== Pipeline Configuration ==="
                    echo "Service: ${env.SERVICE_NAME}"
                    echo "Port: ${env.SERVICE_PORT}"
                    echo "Image Tag: ${env.IMAGE_TAG}"
                    echo "Branch: ${params.BRANCH_NAME}"
                    echo "GCP Registry: ${env.GCP_REGISTRY}"
                    echo "Built Image: ${env.BUILT_IMAGE}"
                    
                    // Initialize GCP with better error handling
                    sh '''
                        # Check if tools are available
                        which gcloud || (echo "gcloud not found in PATH" && exit 1)
                        which docker || (echo "docker not found in PATH" && exit 1)
                        
                        export GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS
                        
                        # Authenticate with GCP
                        gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                        gcloud config set project $GCP_PROJECT_ID
                        gcloud auth configure-docker gcr.io --quiet
                        
                        echo "GCP authentication completed"
                    '''
                }
            }
        }
        
        stage('Checkout & Change Detection') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: "${params.BRANCH_NAME}"]],
                    userRemoteConfigs: [[
                        url: 'https://github.com/ecommerce-devops-lab/ecommerce-microservice-backend-app.git',
                        credentialsId: 'github-token'
                    ]]
                ])
                
                script {
                    // Detect changes for this specific service
                    def hasChanges = sh(
                        script: """
                            if [ "${params.BRANCH_NAME}" = "develop" ] && [ "${params.COMMIT_SHA}" != "HEAD" ]; then
                                git diff --name-only ${params.COMMIT_SHA}~1 ${params.COMMIT_SHA} | grep -q "^${env.SERVICE_NAME}/" || echo "no-changes"
                            else
                                echo "force-build"
                            fi
                        """,
                        returnStdout: true
                    ).trim()
                    
                    if (hasChanges == 'no-changes') {
                        currentBuild.result = 'NOT_BUILT'
                        currentBuild.description = "No changes detected for ${env.SERVICE_NAME}"
                        echo "No changes detected for ${env.SERVICE_NAME}, but continuing build as requested"
                    }
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                dir("${env.SERVICE_NAME}") {
                    sh '''
                        echo "Running unit tests for ${SERVICE_NAME}..."
                        mvn clean test \
                            -Dmaven.test.failure.ignore=false \
                            -Dspring.profiles.active=test \
                            -DforkCount=2 \
                            -DreuseForks=true
                    '''
                }
            }
            post {
                always {
                    script {
                        try {
                            publishTestResults(
                                testResultsPattern: "${env.SERVICE_NAME}/target/surefire-reports/*.xml",
                                allowEmptyResults: true
                            )
                            echo "Test results published successfully"
                        } catch (Exception e) {
                            echo "Test results not found or could not be published: ${e.getMessage()}"
                        }
                    }
                }
            }
        }
        
        stage('SonarQube Analysis') {
            when {
                expression { !params.SKIP_SONAR }
            }
            steps {
                dir("${env.SERVICE_NAME}") {
                    withSonarQubeEnv('sonarqube-server') {
                        sh '''
                            mvn sonar:sonar \
                                -Dsonar.projectKey=ecommerce-${SERVICE_NAME}-dev \
                                -Dsonar.projectName="E-commerce ${SERVICE_NAME} (DEV)" \
                                -Dsonar.branch.name=${BRANCH_NAME} \
                                -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
                                -Dsonar.java.source=17 \
                                -Dsonar.exclusions=**/target/**,**/generated-sources/**
                        '''
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            when {
                expression { !params.SKIP_SONAR }
            }
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    script {
                        try {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                echo "Quality gate status: ${qg.status}"
                                currentBuild.result = 'UNSTABLE'
                                echo "Quality gate failed but continuing pipeline for development environment"
                            } else {
                                echo "Quality gate passed successfully"
                            }
                        } catch (Exception e) {
                            echo "Quality gate check failed: ${e.getMessage()}"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }
        
        stage('Build Application') {
            steps {
                dir("${env.SERVICE_NAME}") {
                    sh '''
                        echo "Building application ${SERVICE_NAME}..."
                        mvn package -DskipTests \
                            -Dspring.profiles.active=dev \
                            -Dmaven.javadoc.skip=true \
                            -B -V
                    '''
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                dir("${env.SERVICE_NAME}") {
                    sh """
                        echo "Building Docker image..."
                        docker build \
                            -t ${env.BUILT_IMAGE} \
                            -t ${env.BUILT_LATEST_IMAGE} \
                            --build-arg SERVICE_NAME=${env.SERVICE_NAME} \
                            --build-arg BUILD_DATE=\$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                            --build-arg VERSION=${env.IMAGE_TAG} \
                            --build-arg VCS_REF=\$(git rev-parse HEAD) \
                            .
                        
                        echo "Images built:"
                        docker images | grep ${env.SERVICE_NAME} || echo "No images found with ${env.SERVICE_NAME}"
                    """
                }
            }
        }
        
        stage('Security Scan with Trivy') {
            when {
                expression { !params.SKIP_SECURITY_SCAN }
            }
            steps {
                sh """
                    echo "Installing Trivy..."
                    if ! command -v trivy &> /dev/null; then
                        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.3
                    fi
                    
                    echo "Scanning image ${env.BUILT_IMAGE}..."
                    trivy image \
                        --format json \
                        --output ${env.SERVICE_NAME}-trivy-report.json \
                        --severity HIGH,CRITICAL \
                        --no-progress \
                        ${env.BUILT_IMAGE} || echo "Trivy scan completed with warnings"
                    
                    # Check for vulnerabilities but don't fail the build in dev
                    if [ -f "${env.SERVICE_NAME}-trivy-report.json" ]; then
                        HIGH_CRITICAL=\$(cat ${env.SERVICE_NAME}-trivy-report.json | jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL")] | length' 2>/dev/null || echo "0")
                        echo "Found \$HIGH_CRITICAL HIGH/CRITICAL vulnerabilities"
                        
                        if [ "\$HIGH_CRITICAL" -gt 10 ]; then
                            echo "WARNING: Too many HIGH/CRITICAL vulnerabilities found (\$HIGH_CRITICAL). Consider reviewing before promoting to staging."
                        fi
                    fi
                """
            }
            post {
                always {
                    script {
                        try {
                            archiveArtifacts artifacts: "${env.SERVICE_NAME}-trivy-report.json", allowEmptyArchive: true
                            echo "Trivy report archived successfully"
                        } catch (Exception e) {
                            echo "Could not archive Trivy report: ${e.getMessage()}"
                        }
                    }
                }
            }
        }
        
        stage('Push to GCP Registry') {
            steps {
                sh """
                    echo "Pushing images to GCP Registry..."
                    docker push ${env.BUILT_IMAGE}
                    docker push ${env.BUILT_LATEST_IMAGE}
                    
                    echo "Images pushed successfully:"
                    echo "- ${env.BUILT_IMAGE}"
                    echo "- ${env.BUILT_LATEST_IMAGE}"
                """
            }
        }
        
        stage('Deploy to Dev Environment') {
            steps {
                sh """
                    echo "Checking Kubernetes deployment..."
                    
                    # Check if kubectl is working
                    kubectl version --client || echo "kubectl not properly configured"
                    
                    # Check if deployment exists
                    if kubectl get deployment ${env.SERVICE_NAME} -n ecommerce-dev >/dev/null 2>&1; then
                        echo "Updating existing deployment..."
                        kubectl set image deployment/${env.SERVICE_NAME} \
                            ${env.SERVICE_NAME}=${env.BUILT_IMAGE} \
                            -n ecommerce-dev
                        
                        kubectl rollout status deployment/${env.SERVICE_NAME} \
                            -n ecommerce-dev --timeout=300s
                    else
                        echo "Deployment ${env.SERVICE_NAME} not found in ecommerce-dev namespace"
                        echo "Skipping deployment step - ensure Kubernetes cluster is configured"
                    fi
                    
                    # Show current status if possible
                    kubectl get pods -n ecommerce-dev -l app=${env.SERVICE_NAME} 2>/dev/null || echo "Could not check pods"
                    kubectl get services -n ecommerce-dev -l app=${env.SERVICE_NAME} 2>/dev/null || echo "Could not check services"
                """
            }
        }
        
        stage('Create PR to Staging') {
            when {
                equals expected: 'develop', actual: params.BRANCH_NAME
            }
            steps {
                sh """
                    echo "Creating PR to staging branch..."
                    
                    # Configure git
                    git config user.name "Jenkins CI"
                    git config user.email "jenkins@ecommerce.local"
                    
                    # Create staging branch from current state
                    STAGING_BRANCH="staging-${env.SERVICE_NAME}-${env.BUILD_NUMBER}"
                    git checkout -B \$STAGING_BRANCH
                    git push origin \$STAGING_BRANCH || echo "Branch push failed, continuing..."
                    
                    # Create PR using GitHub API
                    REPO_NAME=\$(echo 'https://github.com/ecommerce-devops-lab/ecommerce-microservice-backend-app.git' | sed 's|https://github.com/||' | sed 's|\\.git||')
                    
                    curl -X POST \
                        -H "Authorization: token ${env.GITHUB_TOKEN}" \
                        -H "Accept: application/vnd.github.v3+json" \
                        -H "Content-Type: application/json" \
                        https://api.github.com/repos/\$REPO_NAME/pulls \
                        -d '{
                            "title": "🚀 Auto-promotion: '${env.SERVICE_NAME}' '${env.IMAGE_TAG}' to staging",
                            "head": "'staging-${env.SERVICE_NAME}-${env.BUILD_NUMBER}'",
                            "base": "staging",
                            "body": "## Automatic Promotion to Staging\\n\\n**Service:** '${env.SERVICE_NAME}'\\n**Version:** '${env.IMAGE_TAG}'\\n**Build:** '${env.BUILD_NUMBER}'\\n\\n### ✅ Validations Completed\\n- Unit Tests: Passed\\n- Code Quality: SonarQube analyzed\\n- Security Scan: Trivy completed\\n- Docker Image: Built and pushed to GCR\\n\\n### 📦 Artifacts\\n- **Image:** '${env.BUILT_IMAGE}'\\n- **Latest:** '${env.BUILT_LATEST_IMAGE}'\\n\\n### 🔗 Links\\n- [Jenkins Build]('${env.BUILD_URL}')\\n\\n**Ready for staging deployment! 🚀**"
                        }' || echo "PR creation completed (may already exist or failed)"
                """
            }
        }
    }
    
    post {
        always {
            script {
                try {
                    sh """
                        echo "Cleaning up Docker images..."
                        docker rmi ${env.BUILT_IMAGE} 2>/dev/null || true
                        docker rmi ${env.BUILT_LATEST_IMAGE} 2>/dev/null || true
                        docker system prune -f 2>/dev/null || true
                    """
                } catch (Exception e) {
                    echo "Cleanup failed: ${e.getMessage()}"
                }
            }
        }
        
        success {
            script {
                echo "✅ Build Successful - ${env.SERVICE_NAME}"
                echo "🏷️ Version: ${env.IMAGE_TAG}"
                echo "🐳 Image: ${env.BUILT_IMAGE}"
                echo "🚀 Deployed to: Development Environment"
                echo "📊 Build: #${env.BUILD_NUMBER}"
            }
        }
        
        failure {
            script {
                echo "❌ Build Failed - ${env.SERVICE_NAME}"
                echo "🏷️ Version: ${env.IMAGE_TAG}"
                echo "📊 Build: #${env.BUILD_NUMBER}"
                echo "🔗 Pipeline: ${env.BUILD_URL}"
                echo "🔍 Check console output for errors"
            }
        }
        
        unstable {
            script {
                echo "⚠️ Build Unstable - ${env.SERVICE_NAME}"
                echo "🏷️ Version: ${env.IMAGE_TAG}"
                echo "📊 Build: #${env.BUILD_NUMBER}"
                echo "⚠️ Some tests may have failed or quality gates have warnings"
            }
        }
    }
}

// Helper Functions
def getServicePort(serviceName) {
    def servicePorts = [
        'order-service': '8300',
        'payment-service': '8400',
        'product-service': '8500',
        'shipping-service': '8600',
        'user-service': '8700',
        'api-gateway': '8080',
        'service-discovery': '8761',
        'cloud-config': '8888'
    ]
    return servicePorts[serviceName] ?: '8080'
}