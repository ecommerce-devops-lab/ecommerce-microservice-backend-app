pipeline {
    agent any
    
    parameters {
        booleanParam(name: 'SKIP_PERFORMANCE_TESTS', defaultValue: false, description: 'Skip performance tests')
    }
    
    environment {
        DOCKER_REGISTRY = 'juanmadiaz45'
        IMAGE_TAG = "${BUILD_NUMBER}"
        KUBECONFIG = credentials('k8s-config')
        SERVICE_NAME = 'order-service'
        SERVICE_PORT = '8300'
        GITHUB_CREDENTIALS = credentials('github-credentials')
    }
    
    tools {
        maven 'Maven-3.9.4'
        jdk 'OpenJDK-17'
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'staging', 
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/ecommerce-devops-lab/ecommerce-microservice-backend-app.git'
            }
        }
        
        stage('Update image in gcp') {
            steps {
                script {
                    echo "Updating image in gcp ${SERVICE_NAME}..."
                    sh """
                        echo "Updating image ${DOCKER_REGISTRY}/${SERVICE_NAME}:stage-${IMAGE_TAG}"
                        echo "Update completed"
                    """
                }
            }
        }

        stage('Clone tests repository') {
            steps {
                sh '''
                    git clone https://github.com/ecommerce-devops-lab/ecommerce-stage-tests.git
                    cd ecommerce-stage-tests
                    git checkout main
                '''
            }
        }

        stage('Run E2E tests') {
            steps {
                dir('ecommerce-stage-tests') {
                    sh '''
                        python3 -m pip install -r e2e-tests/v2/requirements.txt
                        python3 e2e-tests/v2/run_e2e_tests.py
                    '''
                }
            }
            post {
                always {
                    junit 'ecommerce-stage-tests/e2e-tests/v2/reports/*.xml'
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'ecommerce-stage-tests/e2e-tests/v2/reports',
                        reportFiles: '*.html',
                        reportName: 'E2E Test Report'
                    ])
                }
            }
        }

        stage('Run Performance tests') {
            when {
                expression { return !params.SKIP_PERFORMANCE_TESTS }
            }
            steps {
                dir('ecommerce-stage-tests') {
                    sh '''
                        chmod +x performance-tests/v2/run-performance-tests.sh
                        ./performance-tests/v2/run-performance-tests.sh
                    '''
                }
            }
            post {
                always {
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'ecommerce-stage-tests/performance-tests/v2/reports',
                        reportFiles: '*.html',
                        reportName: 'Performance Test Report'
                    ])
                }
            }
        }

        stage('Create Pull Request') {
            steps {
                script {
                    def branchName = "stage-tests-${BUILD_NUMBER}"
                    sh """
                        git checkout -b ${branchName}
                        git add .
                        git config --global user.email "jenkins@example.com"
                        git config --global user.name "Jenkins"
                        git commit -m "Actualización automática de pruebas de stage - Build #${BUILD_NUMBER}"
                        git push origin ${branchName}
                    """
                    
                    // Crear PR usando la API de GitHub
                    withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                        sh """
                            curl -X POST \
                                -H "Authorization: token ${GITHUB_TOKEN}" \
                                -H "Accept: application/vnd.github.v3+json" \
                                https://api.github.com/repos/ecommerce-devops-lab/ecommerce-microservice-backend-app/pulls \
                                -d '{
                                    "title": "Actualización de pruebas de stage - Build #${BUILD_NUMBER}",
                                    "body": "Actualización automática de pruebas de stage",
                                    "head": "${branchName}",
                                    "base": "main"
                                }'
                        """
                    }
                }
            }
        }
    }
    
    post {
        success {
            emailext (
                subject: "✅ Stage Tests Passed - ${SERVICE_NAME} #${BUILD_NUMBER}",
                body: "Todas las pruebas de stage han pasado para ${SERVICE_NAME}. PR creado automáticamente.",
                to: "${env.CHANGE_AUTHOR_EMAIL}"
            )
        }
        failure {
            emailext (
                subject: "❌ Stage Tests Failed - ${SERVICE_NAME} #${BUILD_NUMBER}",
                body: "Las pruebas de stage fallaron para ${SERVICE_NAME}. Por favor revisar los logs.",
                to: "${env.CHANGE_AUTHOR_EMAIL}"
            )
        }
    }
}